services:

  server:
    build: "./server"
    restart: "unless-stopped"
    expose:
      - 8000
    depends_on: ["database", "authification"]
    ports:
      - 8000:8000
    volumes:
      - ./server:/usr/src/app/
      - django_static_volume:/usr/src/app/static
      - django_media_volume:/usr/src/app/media

  authification:
    build: "./auth"
    depends_on: ["mongo"]
    entrypoint: "python main.py -l"

  front:
    build: "./client"
    entrypoint: "npm start"
    restart: unless-stopped
    ports:
      - 3000:3000
    depends_on: [server]
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - AST_REFRESH=false
    volumes:
      - ./client/public:/usr/src/app/public/
      - ./client/src:/usr/src/app/src/

  database:
    image: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=usr
      - POSTGRES_PASSWORD=MegaGigaPass12345
      - POSTGRES_DB=mainDb
    volumes:
      - database_volume:/var/lib/postgresql/data
  mongo:
    image: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: MegaGigaPass12345
    volumes:
      - 'mongo_data_volume:/data/db'
    
  mongo-express:
    image: mongo-express
    restart: unless-stopped
    depends_on: ["mongo"]
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: MegaGigaPass12345
      ME_CONFIG_MONGODB_URL: mongodb://root:MegaGigaPass12345@mongo:27017/

  build:
    build: 
      context: "./client"
      dockerfile: "./Dockerfile.build"
    restart: "unless-stopped"
    ports:
      - 80:80
    depends_on: ["server"]
    volumes:
      - django_static_volume:/home/src/app/static
      - django_media_volume:/home/src/app/media

volumes:
  django_static_volume:
  django_media_volume:
  mongo_data_volume:
  database_volume: